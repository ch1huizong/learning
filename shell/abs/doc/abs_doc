
主题： shell是如何解析执行的？

主场： linux操作系统


一. 特殊字符

    #           注释
    ;           命令分割符
    ;;          case子句
    .           等价source命令
    "           部分引用
    '           全引用
    ,           衔接算术操作
    `           命令替换输出

    :           nop, sh中的true作用
                占位符
                : > data.txt 清空data文件
    
    !           反转
    ?           测试操作符

    $           变量
    ${}         参数替换
    $*, $@      位置参数
    $?          退出状态码
    $$          Pid

    ()          命令组(子shell); 
                初始化数组(1 2 3)

    {a, b, c}   大括号扩展,不允许有空白

    {}          代码块
    {}\;        路径名，find

    []          条件测试
                数组下标
                字符范围
    [[]]        测试

    (())        整数扩展

    > &> >& >> < <> 重定向

    (command)>  进程替换
    <(command) 

    |           管道, 不能改变脚本的变量 
    >|          强制重定向

    -           选项
                重定向stdin和stdout

    ~+          当前工作目录
    ~.          先前的工作目录
    =~          正则表达式匹配

    空白        分隔函数，命令或变量


二. 变量

    裸体变量    声明或赋值; unset; export; 特殊情况

    赋值        =前后没空格
                未初始化的变量是空值，算数计算中变量看起来是0
                命令替换

    shell中变量是不区分类型的，关键是变量中的值是否只有数字!

    环境变量，需要export到脚本本地环境，只能对脚本产生的命令和进程起作用，
    子进程export的变量是不能影响父进程的环境的


    位置参数 ->
                $0      脚本名
                $#      参数数量
                $*      所有的参数
                        

    访问最好一个参数, args=$#, lastarg=${!args} 或者lastarg=${!#} 
    shift指令位置参数左移, $0不变， $1消失



三. 部分引用/全引用 

    a. shell的特殊字符保持字面意思，但可被其他程序扩展;

    b. 部分引用(")保持空白, 当作一个单元，阻止单词分割

    c. 全引用(')除了字符', 所有字符保持字面意思

    d. 转义, 取消特殊含义或表示特殊含义 + 引用 才有意思! 
       
    注意echo， sed中的引用
    关键是判断\有无特殊含义, 可以阻止单词分割, 续行作用

    如果一个脚本以|结束， 不用非要加上专义符\来表示续航作用


四. 控制结构
    
    1. 条件

            if [ con1 ]
            then
                cmd1
                cmd2
            elif [ con2 ]
                cmd3
                cmd4
            else
                default-cmd
            fi

            if commmand ... 结构

            [[]] 之间所有的字符不会发生文件名扩展或单词分割，
            但会发生参数扩展和命令替换
            
            (()) 计算一个算数表达式的值，exp结果为0, exit status 1;
            exp结果为非0值， exit status 为0或true
            退出状态与[[]]相反

    2. 循环
            for arg in [list]
            do
                commands
            done

            while [condition]
            do
                commands
            done

            until [ condition ] # 当条件满足true,结束循环
            do
                commands
            done

            break/continue

            case "$var" in
                con1)
                    cmd1;;
                con2)
                    cmd2;;
            esac

            select var [in list]
            do
            done


五. 函数

    function_name(){
        commands
    }

    调用前被需要被定义； 内部调用第二个, 第二个可以靠后定义;

    
十二. 杂项

    粘帖位t， 目录：公共目录下可以添加自己的文件，但是不能删除别人的文件
    
