格式化字符串（3）
print >>fd,字符串
str vs repr(精确表示),表达式字符串
生成器,产生一系列值，压缩状态
协程，待接受输入的一系列任务
续行符\后的行可以不按缩进规则排列
_foo import不能导入,与模块有关; __init__特殊方法; __bar私有类成员
运算符和其他符号(没有$,?)
文档字符串"",保持缩进一致
深浅复制
关键是step判断开始和结束索引
序列比较首先是比较的元素，元素逐项比较['he',101,2,100] < ['ze']
字节字符串（已编码）VS Unicode字符串（未编码）

函数的参数是表达式，在调用前系统对表达式求值 -->正常调用
部分求值函数，科里化(函数工厂)

类型，转换

条件表达式-->列表推导
并行迭代zip

异常：与程序退出有关(SystemExit和KeyboardInterrupt), 其他程序错误(Exception)

	上下文管理器协议(__enter__,__exit__) 和 with语句  contextlib
	with obj as var  var存储的是obj.__enter__方法的返回值
	def __enter__(self):
	def __exit__(self, type,value, tb): 
		没异常，三个值都是None,有的话会是解释器传递过来的值
		返回False,引发的异常会传递出上下文;若True，若引发异常不离开上下文吧？

assert expression, msg  确保expression始终为真
__debug__在普通模式(1)为True，在最优模式(-0)为False, 双模式开发


函数定义时默认值参数为可变对象,函数定义时默认值参数的值就确定了
	函数定义：fun(x,y, *args, **kwargs)  默认值参数
	函数调用：fun(1,2,3,4,name='che',age=18) 此时上者，arg=(1,2),kwargs是命名参数组成的字典

	*或**:解包或函数定义

函数调用时传递可变对象（list,dict)，在函数中的对参数的修改可能会修改原对象，引起副作用
避免副作用，指不引起函数外其他对象改变？

变量：局部命名空间-->模块全局命名空间 -->内置命名空间
作用域（函数定义时就确定了): 静态、动态(nonlocal,python3)
	嵌套函数中的内函数，只能访问上层函数中定义的变量不能修改值（global时，目的和情况不同了)

闭包：函数及定义该函数时的环境，可通过fun.__globals__属性访问环境(实质是函定和环境的绑定)
	|
	用途：惰性求值，保持某个状态
	|
	装饰器函数:以一个函数作为参数，返回经过包装的函数（函数装饰器，可以有参数）;
			   类装饰器，返回类对象

嵌套是形式，装饰器是快捷方法，比包（环境打包）是本质

生成器（函数）,部分求值未结束时
协程,yield表达式，给协程发异常r.throw(type,value,tb)
line = (yield result) r.send(val) 的返回值是下一条yield语句的值

生成器VS协程组合不同：
	生成器组合：for, 一次
	协程组合： while, 协程部分一直waiting

生成器表达式：只知道如何按照需要生成数据的生成器

Idea:(多data生产者-->多数据消费者) ,生成器，通过管道方式（强联系）和不通过管道，有主控（弱联系）

声明式编程，声明一系列在所有数据上执行的运算
尽量避免递归和生成器以及装饰器混用。
装饰器，被包装函数属性复制(文档字符串、__dict__)，wraps函数

eval字符串表达式， exec字符串语句， compile(single,exec,eval)编译字节码

yield生成输出流，发送至文件和发送网络

