
格式化字符串 = 普通字符 + 格式说明符

1.普通形式：

	元组：	"hello %s " % ("world")		
	字典：	"hello  %(name)s " % {name:'world'}

	格式：	%key[-|+|0]width.pricision


2.高级格式化字符串：
	"Hello {0}, your age is {age}.".format("Elwood", age=47)
	
	属性引用

	格式说明符：{ 位置参数：格式修饰符 }

		{ place :[fill][align] [sign] [0] [width] [.precision][type]｝

		fill :  填充字符
		align: 	<(左对齐)  >  ^(居中对齐)
		sign :	+  -  '空格'
		0    :  补0填充空白
		width:	最小宽度
		prec :  精度
		type :	格式化类型
	嵌套


3.高级模板形式： string.Template 类似bash中的字符串替换$

	template = string.Tempalte("Hello $name, Your age is ${age}s")
	template.substitute(d)
	d是字典或者关键字参数，关键字参数位置在后面，优先处理。(locals,msg='message')

4.编码
							编码		 写入
	ascii /unicode 字符集   ----> 字节串 ----> 文件(包含的是字节)

	应用：
		f = open("testfile",'rb')

		encoding = ...  确定编码
		...
		fenc = codecs.EncodedFile(f, encoding)   # 文件编码包装器
		data = fenc.read()
	
	pickle/shelve:将python任意对象以其特有的格式转换为字节串后才保存于文件。

--------------------------------------------------

print 输出到文件:
print  >> fileobj, "%3d %0.2f" %(
operator.itemgetter
operator.attrgetter
